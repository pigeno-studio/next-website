{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer/source-files\"\nimport remarkGfm from \"remark-gfm\";\nimport rehypeSlug from \"rehype-slug\";\nimport {visit} from \"unist-util-visit\";\n\nconst computedFields = {\n    slug: {\n      type: \"string\",\n      resolve: (doc) => `/${doc._raw.flattenedPath}`,\n    },\n    slugAsParams: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n    },\n    url: {type: \"string\", resolve: (doc) => `/${doc._raw.flattenedPath}`},\n}\n\nexport const Doc = defineDocumentType(() => ({\nname: \"Doc\",\nfilePathPattern: `docs/**/*.mdx`,\ncontentType: \"mdx\",\nfields: {\n    title: {type: \"string\", required: true},\n    description: {type: \"string\", required: false},\n    date: {type: \"date\", required: false},\n},\ncomputedFields\n}));\n\nconst Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the post\",\n      required: true,\n    },\n  },\n  computedFields: {\n    url: {\n      type: \"string\",\n      resolve: (doc) => `/content/${doc._raw.flattenedPath}`,\n    },\n  },\n}))\n\n// export default makeSource({\n//   contentDirPath: \"./content\",\n//   documentTypes: [Doc],\n\n//   mdx: { remarkPlugins: [[remarkCodeHike, { theme: \"material-palenight\" }]] },\n// })\n\n\nexport default makeSource({\n    contentDirPath: \"./content\",\n    documentTypes: [Doc],\n    mdx: {\n      remarkPlugins: [remarkGfm],\n      rehypePlugins: [\n        rehypeSlug,\n        () => (tree) => {\n          visit(tree, \"element\", (node) => {\n            if (node.tagName === \"code\" && node.data && node.data.meta) {\n              node.properties.meta = node.data.meta;\n            }\n          });\n        },\n      ],\n    },\n  });"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,eAAe;AACtB,OAAO,gBAAgB;AACvB,SAAQ,aAAY;AAEpB,IAAM,iBAAiB;AAAA,EACnB,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK,aAAa;AAAA,EAC9C;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EACvE;AAAA,EACA,KAAK,EAAC,MAAM,UAAU,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK,aAAa,GAAE;AACxE;AAEO,IAAM,MAAM,mBAAmB,OAAO;AAAA,EAC7C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACJ,OAAO,EAAC,MAAM,UAAU,UAAU,KAAI;AAAA,IACtC,aAAa,EAAC,MAAM,UAAU,UAAU,MAAK;AAAA,IAC7C,MAAM,EAAC,MAAM,QAAQ,UAAU,MAAK;AAAA,EACxC;AAAA,EACA;AACA,EAAE;AAEF,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACrC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,aAAa;AAAA,IACtD;AAAA,EACF;AACF,EAAE;AAUF,IAAO,8BAAQ,WAAW;AAAA,EACtB,gBAAgB;AAAA,EAChB,eAAe,CAAC,GAAG;AAAA,EACnB,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACb;AAAA,MACA,MAAM,CAAC,SAAS;AACd,cAAM,MAAM,WAAW,CAAC,SAAS;AAC/B,cAAI,KAAK,YAAY,UAAU,KAAK,QAAQ,KAAK,KAAK,MAAM;AAC1D,iBAAK,WAAW,OAAO,KAAK,KAAK;AAAA,UACnC;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
